{
  "stats": {
    "suites": 7,
    "tests": 40,
    "passes": 40,
    "pending": 0,
    "failures": 0,
    "start": "2024-12-05T10:16:11.737Z",
    "end": "2024-12-05T10:16:11.750Z",
    "duration": 13,
    "testsRegistered": 40,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "5f48640c-a0b6-4e3f-916d-ac7cf7c97bbf",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "ff5d2a5e-c84e-4ff4-afac-da898a3265d3",
          "title": "add.js",
          "fullFile": "/Users/zhiqing.feng/Desktop/Personal/TUN/software_testing_final/software_testing/test/add.test.mjs",
          "file": "/test/add.test.mjs",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return 10 for add(6, 4)",
              "fullTitle": "add.js should return 10 for add(6, 4)",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(add(6, 4)).to.equal(10);",
              "err": {},
              "uuid": "af7ac2d1-2da5-4584-97ad-e8d392d45792",
              "parentUUID": "ff5d2a5e-c84e-4ff4-afac-da898a3265d3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 0 for add(0, 0)",
              "fullTitle": "add.js should return 0 for add(0, 0)",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(add(0, 0)).to.equal(0);",
              "err": {},
              "uuid": "677ce374-9712-4572-a1ef-cc6ccfb3e6a3",
              "parentUUID": "ff5d2a5e-c84e-4ff4-afac-da898a3265d3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle negative numbers",
              "fullTitle": "add.js should handle negative numbers",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(add(-5, -3)).to.equal(-8);",
              "err": {},
              "uuid": "a7d4c415-9d9e-4736-b0f0-6f2cf19c2ae1",
              "parentUUID": "ff5d2a5e-c84e-4ff4-afac-da898a3265d3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return correct value when adding positive and negative numbers",
              "fullTitle": "add.js should return correct value when adding positive and negative numbers",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(add(10, -5)).to.equal(5);",
              "err": {},
              "uuid": "8acdecae-aa2a-4511-a304-68cb573ae0f7",
              "parentUUID": "ff5d2a5e-c84e-4ff4-afac-da898a3265d3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle decimals",
              "fullTitle": "add.js should handle decimals",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(add(1.5, 2.5)).to.equal(4.0);",
              "err": {},
              "uuid": "ae737533-73aa-4388-a5d8-ba973d7752dc",
              "parentUUID": "ff5d2a5e-c84e-4ff4-afac-da898a3265d3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle large numbers",
              "fullTitle": "add.js should handle large numbers",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(add(1000000000, 2000000000)).to.equal(3000000000);",
              "err": {},
              "uuid": "0bd9fd9f-c469-42fe-bff7-a88ce1dc36b2",
              "parentUUID": "ff5d2a5e-c84e-4ff4-afac-da898a3265d3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the other number when one argument is 0",
              "fullTitle": "add.js should return the other number when one argument is 0",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(add(0, 5)).to.equal(5);\nexpect(add(10, 0)).to.equal(10);",
              "err": {},
              "uuid": "df9681a4-812a-407c-9194-afd225d0d4a2",
              "parentUUID": "ff5d2a5e-c84e-4ff4-afac-da898a3265d3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return concatenated strings if one or both arguments are strings",
              "fullTitle": "add.js should return concatenated strings if one or both arguments are strings",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(add(\"6\", 4)).to.equal(\"64\");\nexpect(add(6, \"4\")).to.equal(\"64\");\nexpect(add(\"6\", \"4\")).to.equal(\"64\");",
              "err": {},
              "uuid": "3355da52-938b-4f2b-92e7-33aadd791dc8",
              "parentUUID": "ff5d2a5e-c84e-4ff4-afac-da898a3265d3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the argument value if only one argument is provided",
              "fullTitle": "add.js should return the argument value if only one argument is provided",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(add(5)).to.equal(5);\nexpect(add(undefined, 4)).to.equal(4);",
              "err": {},
              "uuid": "6bdd5b11-d944-46df-a69c-67c71bbaf08b",
              "parentUUID": "ff5d2a5e-c84e-4ff4-afac-da898a3265d3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 0 if no arguments are provided",
              "fullTitle": "add.js should return 0 if no arguments are provided",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(add()).to.equal(0);",
              "err": {},
              "uuid": "8ac5d1c8-9e06-4d3a-8529-2e53a217be5b",
              "parentUUID": "ff5d2a5e-c84e-4ff4-afac-da898a3265d3",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "af7ac2d1-2da5-4584-97ad-e8d392d45792",
            "677ce374-9712-4572-a1ef-cc6ccfb3e6a3",
            "a7d4c415-9d9e-4736-b0f0-6f2cf19c2ae1",
            "8acdecae-aa2a-4511-a304-68cb573ae0f7",
            "ae737533-73aa-4388-a5d8-ba973d7752dc",
            "0bd9fd9f-c469-42fe-bff7-a88ce1dc36b2",
            "df9681a4-812a-407c-9194-afd225d0d4a2",
            "3355da52-938b-4f2b-92e7-33aadd791dc8",
            "6bdd5b11-d944-46df-a69c-67c71bbaf08b",
            "8ac5d1c8-9e06-4d3a-8529-2e53a217be5b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "8f4ebf4f-bee3-43a5-b9fd-b732db141d48",
          "title": "compact.js - Remove false values from arrays",
          "fullFile": "/Users/zhiqing.feng/Desktop/Personal/TUN/software_testing_final/software_testing/test/compact.test.mjs",
          "file": "/test/compact.test.mjs",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should remove empty strings from the array",
              "fullTitle": "compact.js - Remove false values from arrays should remove empty strings from the array",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const input = [' ', 'Non-GMO', 'Snacks'];\nconst result = compact(input);\nexpect(result).to.deep.equal(['Non-GMO', 'Snacks']);  // Empty string removed correctly",
              "err": {},
              "uuid": "f8694513-7ad6-4a92-a064-ed5be7818028",
              "parentUUID": "8f4ebf4f-bee3-43a5-b9fd-b732db141d48",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return an empty array when input is empty",
              "fullTitle": "compact.js - Remove false values from arrays should return an empty array when input is empty",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const input = [];\nconst result = compact(input);\nexpect(result).to.deep.equal([]);  // Empty input should return an empty array",
              "err": {},
              "uuid": "5890c9cd-2881-4826-b34c-ad70724a25a8",
              "parentUUID": "8f4ebf4f-bee3-43a5-b9fd-b732db141d48",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f8694513-7ad6-4a92-a064-ed5be7818028",
            "5890c9cd-2881-4826-b34c-ad70724a25a8"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "c4c56cda-ce46-4b1c-af3e-f073beb65a8d",
          "title": "countBy.js",
          "fullFile": "/Users/zhiqing.feng/Desktop/Personal/TUN/software_testing_final/software_testing/test/countBy.test.mjs",
          "file": "/test/countBy.test.mjs",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return an empty object for an empty array",
              "fullTitle": "countBy.js should return an empty object for an empty array",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = countBy([], (value) => value);\nexpect(result).to.deep.equal({});",
              "err": {},
              "uuid": "60359708-e758-4bd7-b383-6e7fa7698865",
              "parentUUID": "c4c56cda-ce46-4b1c-af3e-f073beb65a8d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error for invalid iteratee",
              "fullTitle": "countBy.js should throw an error for invalid iteratee",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const input = [1, 2, 3];\nexpect(() => countBy(input, null)).to.throw();\nexpect(() => countBy(input, undefined)).to.throw();",
              "err": {},
              "uuid": "a16137ea-ac07-40cf-87e4-73311e24fe06",
              "parentUUID": "c4c56cda-ce46-4b1c-af3e-f073beb65a8d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "60359708-e758-4bd7-b383-6e7fa7698865",
            "a16137ea-ac07-40cf-87e4-73311e24fe06"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "05fecb3f-98f1-4f5b-b142-1b11fc67a4b5",
          "title": "divide.js",
          "fullFile": "/Users/zhiqing.feng/Desktop/Personal/TUN/software_testing_final/software_testing/test/divide.test.mjs",
          "file": "/test/divide.test.mjs",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return NaN for divide(10, 0)",
              "fullTitle": "divide.js should return NaN for divide(10, 0)",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(divide(10, 0)).to.be.NaN;",
              "err": {},
              "uuid": "607b6a64-7c08-40cf-b7d1-42a036f6a9ef",
              "parentUUID": "05fecb3f-98f1-4f5b-b142-1b11fc67a4b5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 1 for divide(1, 1)",
              "fullTitle": "divide.js should return 1 for divide(1, 1)",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(divide(1, 1)).to.equal(1);",
              "err": {},
              "uuid": "931a30fd-80d1-4f99-a65f-1677f44662bb",
              "parentUUID": "05fecb3f-98f1-4f5b-b142-1b11fc67a4b5",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "607b6a64-7c08-40cf-b7d1-42a036f6a9ef",
            "931a30fd-80d1-4f99-a65f-1677f44662bb"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "fe96aa67-df47-469b-ad67-78c28353863e",
          "title": "isDate.js",
          "fullFile": "/Users/zhiqing.feng/Desktop/Personal/TUN/software_testing_final/software_testing/test/isDate.test.mjs",
          "file": "/test/isDate.test.mjs",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return true for a valid Date object",
              "fullTitle": "isDate.js should return true for a valid Date object",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = isDate(new Date());\nexpect(result).to.be.true;",
              "err": {},
              "uuid": "c6e21b23-42fe-4723-9261-a569cef6d1ac",
              "parentUUID": "fe96aa67-df47-469b-ad67-78c28353863e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false for a string that looks like a date",
              "fullTitle": "isDate.js should return false for a string that looks like a date",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = isDate(\"Mon April 23 2012\");\nexpect(result).to.be.false;",
              "err": {},
              "uuid": "a655917d-f9d4-4c58-865a-585f4da919ec",
              "parentUUID": "fe96aa67-df47-469b-ad67-78c28353863e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false for a timestamp number",
              "fullTitle": "isDate.js should return false for a timestamp number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = isDate(1659394800000); // Example timestamp\nexpect(result).to.be.false;",
              "err": {},
              "uuid": "8388de93-35f0-451c-95de-e5caec280c5e",
              "parentUUID": "fe96aa67-df47-469b-ad67-78c28353863e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false for null or undefined",
              "fullTitle": "isDate.js should return false for null or undefined",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(isDate(null)).to.be.false;\nexpect(isDate(undefined)).to.be.false;",
              "err": {},
              "uuid": "ce41e233-8cf8-4eb0-874c-69c3a55defd9",
              "parentUUID": "fe96aa67-df47-469b-ad67-78c28353863e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false for plain objects",
              "fullTitle": "isDate.js should return false for plain objects",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = isDate({ year: 2023, month: 12, day: 1 });\nexpect(result).to.be.false;",
              "err": {},
              "uuid": "77e17424-d9bb-40ae-9d32-62a2d9950602",
              "parentUUID": "fe96aa67-df47-469b-ad67-78c28353863e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false for arrays",
              "fullTitle": "isDate.js should return false for arrays",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = isDate([\"2023-12-01\"]);\nexpect(result).to.be.false;",
              "err": {},
              "uuid": "50b4c719-ddb9-46b7-afe0-3ffb92e8de80",
              "parentUUID": "fe96aa67-df47-469b-ad67-78c28353863e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return true for an invalid Date object",
              "fullTitle": "isDate.js should return true for an invalid Date object",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = isDate(new Date(\"invalid date\"));\nexpect(result).to.be.true; // It's still a Date object, even if it's invalid.",
              "err": {},
              "uuid": "871928cf-d2a4-4d1c-9260-5a9a0ad29016",
              "parentUUID": "fe96aa67-df47-469b-ad67-78c28353863e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle custom Date-like objects",
              "fullTitle": "isDate.js should handle custom Date-like objects",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const customDate = { toString: () => \"[object Date]\" };\nconst result = isDate(customDate);\nexpect(result).to.be.false;",
              "err": {},
              "uuid": "540c2f0b-3b77-49b8-96b4-4a0d37ea57ad",
              "parentUUID": "fe96aa67-df47-469b-ad67-78c28353863e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle edge cases with other object types",
              "fullTitle": "isDate.js should handle edge cases with other object types",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(isDate(new Map())).to.be.false;\nexpect(isDate(new Set())).to.be.false;",
              "err": {},
              "uuid": "8f1428b2-57f1-41d3-8513-3d975cbefa24",
              "parentUUID": "fe96aa67-df47-469b-ad67-78c28353863e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c6e21b23-42fe-4723-9261-a569cef6d1ac",
            "a655917d-f9d4-4c58-865a-585f4da919ec",
            "8388de93-35f0-451c-95de-e5caec280c5e",
            "ce41e233-8cf8-4eb0-874c-69c3a55defd9",
            "77e17424-d9bb-40ae-9d32-62a2d9950602",
            "50b4c719-ddb9-46b7-afe0-3ffb92e8de80",
            "871928cf-d2a4-4d1c-9260-5a9a0ad29016",
            "540c2f0b-3b77-49b8-96b4-4a0d37ea57ad",
            "8f1428b2-57f1-41d3-8513-3d975cbefa24"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "3f59a3d0-b6f3-47f6-b547-150255ddb3fe",
          "title": "Simple test",
          "fullFile": "/Users/zhiqing.feng/Desktop/Personal/TUN/software_testing_final/software_testing/test/simple.test.mjs",
          "file": "/test/simple.test.mjs",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should pass",
              "fullTitle": "Simple test should pass",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(true).to.be.true;",
              "err": {},
              "uuid": "d1ab4f78-6503-4713-9747-8d32837e9a8a",
              "parentUUID": "3f59a3d0-b6f3-47f6-b547-150255ddb3fe",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d1ab4f78-6503-4713-9747-8d32837e9a8a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "e845a4eb-cf8e-45d2-b429-70004cbee926",
          "title": "toNumber.js",
          "fullFile": "/Users/zhiqing.feng/Desktop/Personal/TUN/software_testing_final/software_testing/test/toNumber.test.mjs",
          "file": "/test/toNumber.test.mjs",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return the same number for numeric input",
              "fullTitle": "toNumber.js should return the same number for numeric input",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(toNumber(3.2)).to.equal(3.2);\nexpect(toNumber(Number.MIN_VALUE)).to.equal(5e-324);\nexpect(toNumber(Infinity)).to.equal(Infinity);\nexpect(toNumber(0)).to.equal(0);",
              "err": {},
              "uuid": "68550bff-2660-4c7f-81c6-603ddb6622da",
              "parentUUID": "e845a4eb-cf8e-45d2-b429-70004cbee926",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should parse numeric strings correctly",
              "fullTitle": "toNumber.js should parse numeric strings correctly",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(toNumber(\"3.2\")).to.equal(3.2);\nexpect(toNumber(\"  42  \")).to.equal(42); // Leading/trailing whitespace",
              "err": {},
              "uuid": "20f56ff1-bb91-4f12-b36c-6f5f718ce51b",
              "parentUUID": "e845a4eb-cf8e-45d2-b429-70004cbee926",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle binary strings",
              "fullTitle": "toNumber.js should handle binary strings",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(toNumber(\"0b101\")).to.equal(5); // Binary representation",
              "err": {},
              "uuid": "572c59bb-31f5-4a30-9cdb-900598e934d4",
              "parentUUID": "e845a4eb-cf8e-45d2-b429-70004cbee926",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle octal strings",
              "fullTitle": "toNumber.js should handle octal strings",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(toNumber(\"0o10\")).to.equal(8); // Octal representation",
              "err": {},
              "uuid": "658beeba-18d3-40d2-ad49-7b8b674a1122",
              "parentUUID": "e845a4eb-cf8e-45d2-b429-70004cbee926",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle hexadecimal strings",
              "fullTitle": "toNumber.js should handle hexadecimal strings",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(toNumber(\"0x1f\")).to.equal(31); // Hexadecimal representation",
              "err": {},
              "uuid": "18dafee9-b746-4588-853d-0e64e1fe75dc",
              "parentUUID": "e845a4eb-cf8e-45d2-b429-70004cbee926",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return NaN for invalid hexadecimal strings",
              "fullTitle": "toNumber.js should return NaN for invalid hexadecimal strings",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(toNumber(\"0x1g\")).to.be.NaN; // Invalid hexadecimal",
              "err": {},
              "uuid": "a3320c00-5d01-4bb3-9c9d-d413b0b23fea",
              "parentUUID": "e845a4eb-cf8e-45d2-b429-70004cbee926",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return NaN for symbols",
              "fullTitle": "toNumber.js should return NaN for symbols",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(toNumber(Symbol(\"symbol\"))).to.be.NaN;",
              "err": {},
              "uuid": "3a9f5922-6a1f-4c83-ba15-61dbd2091518",
              "parentUUID": "e845a4eb-cf8e-45d2-b429-70004cbee926",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle objects with valueOf method",
              "fullTitle": "toNumber.js should handle objects with valueOf method",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const obj = {\n    valueOf: () => 42\n};\nexpect(toNumber(obj)).to.equal(42);",
              "err": {},
              "uuid": "86932f67-5901-4465-b673-1a4c27a1113e",
              "parentUUID": "e845a4eb-cf8e-45d2-b429-70004cbee926",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle objects without valueOf method",
              "fullTitle": "toNumber.js should handle objects without valueOf method",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const obj = { a: 1 };\nexpect(toNumber(obj)).to.be.NaN;",
              "err": {},
              "uuid": "099e7a69-5cfb-4e06-abea-84f557dcc067",
              "parentUUID": "e845a4eb-cf8e-45d2-b429-70004cbee926",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle arrays",
              "fullTitle": "toNumber.js should handle arrays",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(toNumber([42])).to.equal(42); // Single-element array\nexpect(toNumber([1, 2])).to.be.NaN; // Multi-element array",
              "err": {},
              "uuid": "984751a5-425c-4abc-bdca-ace8f0181b18",
              "parentUUID": "e845a4eb-cf8e-45d2-b429-70004cbee926",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return NaN for null or undefined",
              "fullTitle": "toNumber.js should return NaN for null or undefined",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(toNumber(null)).to.equal(0); // Special case: null is coerced to 0\nexpect(toNumber(undefined)).to.be.NaN;",
              "err": {},
              "uuid": "bde6c704-656c-422e-90fe-f1323c7ad8a7",
              "parentUUID": "e845a4eb-cf8e-45d2-b429-70004cbee926",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle edge cases with `0`",
              "fullTitle": "toNumber.js should handle edge cases with `0`",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(toNumber(0)).to.equal(0); // 0 should remain 0\nexpect(toNumber(-0)).to.equal(-0); // -0 should remain -0",
              "err": {},
              "uuid": "54595210-56f0-4f2c-b2b7-18e7f7700fc1",
              "parentUUID": "e845a4eb-cf8e-45d2-b429-70004cbee926",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle empty objects gracefully",
              "fullTitle": "toNumber.js should handle empty objects gracefully",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(toNumber({})).to.be.NaN;",
              "err": {},
              "uuid": "50d9fc0f-d24b-44e2-a52f-a463c85b0fbf",
              "parentUUID": "e845a4eb-cf8e-45d2-b429-70004cbee926",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle very large numbers in strings",
              "fullTitle": "toNumber.js should handle very large numbers in strings",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(toNumber(\"1e+30\")).to.equal(1e30); // Scientific notation",
              "err": {},
              "uuid": "3ba60036-cb27-4a02-a07c-6c34fd38b13c",
              "parentUUID": "e845a4eb-cf8e-45d2-b429-70004cbee926",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "68550bff-2660-4c7f-81c6-603ddb6622da",
            "20f56ff1-bb91-4f12-b36c-6f5f718ce51b",
            "572c59bb-31f5-4a30-9cdb-900598e934d4",
            "658beeba-18d3-40d2-ad49-7b8b674a1122",
            "18dafee9-b746-4588-853d-0e64e1fe75dc",
            "a3320c00-5d01-4bb3-9c9d-d413b0b23fea",
            "3a9f5922-6a1f-4c83-ba15-61dbd2091518",
            "86932f67-5901-4465-b673-1a4c27a1113e",
            "099e7a69-5cfb-4e06-abea-84f557dcc067",
            "984751a5-425c-4abc-bdca-ace8f0181b18",
            "bde6c704-656c-422e-90fe-f1323c7ad8a7",
            "54595210-56f0-4f2c-b2b7-18e7f7700fc1",
            "50d9fc0f-d24b-44e2-a52f-a463c85b0fbf",
            "3ba60036-cb27-4a02-a07c-6c34fd38b13c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 10000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}