{
  "stats": {
    "suites": 7,
    "tests": 32,
    "passes": 25,
    "pending": 0,
    "failures": 7,
    "start": "2024-12-05T16:44:20.771Z",
    "end": "2024-12-05T16:44:20.788Z",
    "duration": 17,
    "testsRegistered": 32,
    "passPercent": 78.125,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "66fc9f9d-c319-43d8-84b6-46b5f35aff9c",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "c7833365-71dc-4657-b181-4240d21cbf9a",
          "title": "add.js",
          "fullFile": "/Users/zhiqing.feng/Desktop/Personal/TUN/software_testing_final/software_testing/test/add.test.js",
          "file": "/test/add.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should add two positive numbers",
              "fullTitle": "add.js should add two positive numbers",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(add(10, 20)).to.equal(30);",
              "err": {},
              "uuid": "aabf13c4-b5bc-41b2-8c5f-53c5a9edf52e",
              "parentUUID": "c7833365-71dc-4657-b181-4240d21cbf9a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should add a positive and a negative number",
              "fullTitle": "add.js should add a positive and a negative number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(add(50, -10)).to.equal(40);",
              "err": {},
              "uuid": "35c4a3c8-e272-4d3b-a9c0-f0a5afa9c2f2",
              "parentUUID": "c7833365-71dc-4657-b181-4240d21cbf9a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should add a number and zero",
              "fullTitle": "add.js should add a number and zero",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(add(29.99, 0)).to.equal(29.99);",
              "err": {},
              "uuid": "8f4fa45a-57c3-425d-8f1b-2113b774aed0",
              "parentUUID": "c7833365-71dc-4657-b181-4240d21cbf9a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should add two decimal numbers",
              "fullTitle": "add.js should add two decimal numbers",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(add(1.50, 2.25)).to.equal(3.75);",
              "err": {},
              "uuid": "49e6b5aa-d9d2-4a81-8ec3-79671dc412f2",
              "parentUUID": "c7833365-71dc-4657-b181-4240d21cbf9a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should add a negative number and zero",
              "fullTitle": "add.js should add a negative number and zero",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(add(-20, 0)).to.equal(-20);",
              "err": {},
              "uuid": "703ce078-5ad6-490c-b3b8-7989d04b69f8",
              "parentUUID": "c7833365-71dc-4657-b181-4240d21cbf9a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "aabf13c4-b5bc-41b2-8c5f-53c5a9edf52e",
            "35c4a3c8-e272-4d3b-a9c0-f0a5afa9c2f2",
            "8f4fa45a-57c3-425d-8f1b-2113b774aed0",
            "49e6b5aa-d9d2-4a81-8ec3-79671dc412f2",
            "703ce078-5ad6-490c-b3b8-7989d04b69f8"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "d866f50c-59cb-43a0-8b3b-8729f7f6b997",
          "title": "compact.js",
          "fullFile": "/Users/zhiqing.feng/Desktop/Personal/TUN/software_testing_final/software_testing/test/compact.test.js",
          "file": "/test/compact.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should remove null and undefined values",
              "fullTitle": "compact.js should remove null and undefined values",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const input = [null, 'Snacks', undefined];\nconst output = ['Snacks'];\nexpect(compact(input)).to.deep.equal(output);",
              "err": {
                "message": "AssertionError: expected [ , '-1': 'Snacks' ] to deeply equal [ 'Snacks' ]",
                "estack": "AssertionError: expected [ , '-1': 'Snacks' ] to deeply equal [ 'Snacks' ]\n    at Context.<anonymous> (file:///Users/zhiqing.feng/Desktop/Personal/TUN/software_testing_final/software_testing/test/compact.test.js:10:36)\n    at process.processImmediate (node:internal/timers:491:21)",
                "diff": "- []\n+ [\n+   \"Snacks\"\n+ ]\n"
              },
              "uuid": "25bc3dcc-15e4-4027-8b11-3782668fb5a4",
              "parentUUID": "d866f50c-59cb-43a0-8b3b-8729f7f6b997",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the same array when there are no false values",
              "fullTitle": "compact.js should return the same array when there are no false values",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const input = ['Drinks', 'Vegan'];\nconst output = ['Drinks', 'Vegan'];\nexpect(compact(input)).to.deep.equal(output);",
              "err": {
                "message": "AssertionError: expected [ 'Vegan', '-1': 'Drinks' ] to deeply equal [ 'Drinks', 'Vegan' ]",
                "estack": "AssertionError: expected [ 'Vegan', '-1': 'Drinks' ] to deeply equal [ 'Drinks', 'Vegan' ]\n    at Context.<anonymous> (file:///Users/zhiqing.feng/Desktop/Personal/TUN/software_testing_final/software_testing/test/compact.test.js:17:36)\n    at process.processImmediate (node:internal/timers:491:21)",
                "diff": " [\n+   \"Drinks\"\n   \"Vegan\"\n ]\n"
              },
              "uuid": "580b3f81-d3d4-41ee-93f2-5b6268645729",
              "parentUUID": "d866f50c-59cb-43a0-8b3b-8729f7f6b997",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should remove empty strings from the array",
              "fullTitle": "compact.js should remove empty strings from the array",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const input = [' ', 'Non-GMO', 'Snacks'];\nconst output = ['Non-GMO', 'Snacks'];\nexpect(compact(input)).to.deep.equal(output);",
              "err": {},
              "uuid": "01291a89-be70-42d5-9434-1ac5bf759895",
              "parentUUID": "d866f50c-59cb-43a0-8b3b-8729f7f6b997",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should remove false and 0 values from the array",
              "fullTitle": "compact.js should remove false and 0 values from the array",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const input = [false, 'zero', 'Organic'];\nconst output = ['Organic'];\nexpect(compact(input)).to.deep.equal(output);",
              "err": {},
              "uuid": "0e0804f2-79df-427f-aa95-bbe3ad100f20",
              "parentUUID": "d866f50c-59cb-43a0-8b3b-8729f7f6b997",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return an empty array when the input is empty",
              "fullTitle": "compact.js should return an empty array when the input is empty",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const input = [];\nconst output = [];\nexpect(compact(input)).to.deep.equal(output);",
              "err": {},
              "uuid": "3b827b5a-940e-4317-8e07-4adbe85042c7",
              "parentUUID": "d866f50c-59cb-43a0-8b3b-8729f7f6b997",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "01291a89-be70-42d5-9434-1ac5bf759895",
            "0e0804f2-79df-427f-aa95-bbe3ad100f20",
            "3b827b5a-940e-4317-8e07-4adbe85042c7"
          ],
          "failures": [
            "25bc3dcc-15e4-4027-8b11-3782668fb5a4",
            "580b3f81-d3d4-41ee-93f2-5b6268645729"
          ],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "d6916567-951f-4a88-b468-15d1acdaa119",
          "title": "countBy.js",
          "fullFile": "/Users/zhiqing.feng/Desktop/Personal/TUN/software_testing_final/software_testing/test/countBy.test.js",
          "file": "/test/countBy.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return count by a specific attribute of objects in an array",
              "fullTitle": "countBy.js should return count by a specific attribute of objects in an array",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const users = [\n    { 'user': 'barney', 'active': true },\n    { 'user': 'betty', 'active': true },\n    { 'user': 'fred', 'active': false }\n];\n\nconst result = countBy(users, (value) => value.active);\nexpect(result).to.deep.equal({ 'true': 2, 'false': 1 });",
              "err": {
                "message": "AssertionError: expected { true: 1, false: +0 } to deeply equal { true: 2, false: 1 }",
                "estack": "AssertionError: expected { true: 1, false: +0 } to deeply equal { true: 2, false: 1 }\n    at Context.<anonymous> (file:///Users/zhiqing.feng/Desktop/Personal/TUN/software_testing_final/software_testing/test/countBy.test.js:16:32)\n    at process.processImmediate (node:internal/timers:491:21)",
                "diff": " {\n-   \"false\": 0\n-   \"true\": 1\n+   \"false\": 1\n+   \"true\": 2\n }\n"
              },
              "uuid": "2fafad7d-8e6a-4db4-ab44-d273d96b007a",
              "parentUUID": "d6916567-951f-4a88-b468-15d1acdaa119",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return number if number is valid",
              "fullTitle": "countBy.js should return number if number is valid",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const result = countBy([1.8], (value) => value);\nexpect(result).to.deep.equal({ '1.8': 1 });",
              "err": {
                "message": "AssertionError: expected { '1.8': +0 } to deeply equal { '1.8': 1 }",
                "estack": "AssertionError: expected { '1.8': +0 } to deeply equal { '1.8': 1 }\n    at Context.<anonymous> (file:///Users/zhiqing.feng/Desktop/Personal/TUN/software_testing_final/software_testing/test/countBy.test.js:22:32)\n    at process.processImmediate (node:internal/timers:491:21)",
                "diff": " {\n-   \"1.8\": 0\n+   \"1.8\": 1\n }\n"
              },
              "uuid": "e93535eb-eb70-4e3d-b2d9-ee2d093fd547",
              "parentUUID": "d6916567-951f-4a88-b468-15d1acdaa119",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return count of valid numeric strings",
              "fullTitle": "countBy.js should return count of valid numeric strings",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const result = countBy([1, '1', 2, '2'], (value) => value);\nexpect(result).to.deep.equal({ '1': 2, '2': 2 });",
              "err": {
                "message": "AssertionError: expected { '1': 1, '2': 1 } to deeply equal { '1': 2, '2': 2 }",
                "estack": "AssertionError: expected { '1': 1, '2': 1 } to deeply equal { '1': 2, '2': 2 }\n    at Context.<anonymous> (file:///Users/zhiqing.feng/Desktop/Personal/TUN/software_testing_final/software_testing/test/countBy.test.js:28:32)\n    at process.processImmediate (node:internal/timers:491:21)",
                "diff": " {\n-   \"1\": 1\n-   \"2\": 1\n+   \"1\": 2\n+   \"2\": 2\n }\n"
              },
              "uuid": "f23ba5e5-95bc-43c1-acd3-d333e3e59cc5",
              "parentUUID": "d6916567-951f-4a88-b468-15d1acdaa119",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "2fafad7d-8e6a-4db4-ab44-d273d96b007a",
            "e93535eb-eb70-4e3d-b2d9-ee2d093fd547",
            "f23ba5e5-95bc-43c1-acd3-d333e3e59cc5"
          ],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "eacdeed7-8d92-4156-9b52-f8fa5124bf20",
          "title": "divide.js",
          "fullFile": "/Users/zhiqing.feng/Desktop/Personal/TUN/software_testing_final/software_testing/test/divide.test.js",
          "file": "/test/divide.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return the correct quotient when dividing two positive numbers",
              "fullTitle": "divide.js should return the correct quotient when dividing two positive numbers",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = divide(100, 4);\nexpect(result).to.equal(25);",
              "err": {},
              "uuid": "5d8cc567-ff58-448d-94dd-1267d5a7182f",
              "parentUUID": "eacdeed7-8d92-4156-9b52-f8fa5124bf20",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return NaN when dividing a number by zero",
              "fullTitle": "divide.js should return NaN when dividing a number by zero",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const result = divide(50, 0);\nexpect(result).to.be.NaN;",
              "err": {
                "message": "AssertionError: expected Infinity to be NaN",
                "estack": "AssertionError: expected Infinity to be NaN\n    at Context.<anonymous> (file:///Users/zhiqing.feng/Desktop/Personal/TUN/software_testing_final/software_testing/test/divide.test.js:15:29)\n    at process.processImmediate (node:internal/timers:491:21)",
                "diff": null
              },
              "uuid": "b98bd129-1148-4b6d-a71e-72ecded80f36",
              "parentUUID": "eacdeed7-8d92-4156-9b52-f8fa5124bf20",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the correct quotient when dividing by a decimal",
              "fullTitle": "divide.js should return the correct quotient when dividing by a decimal",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = divide(100, 10);\nexpect(result).to.equal(10);",
              "err": {},
              "uuid": "dc401296-4cbc-4ab1-abe5-8a5c3623de23",
              "parentUUID": "eacdeed7-8d92-4156-9b52-f8fa5124bf20",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the correct quotient when dividing a negative number by a positive number",
              "fullTitle": "divide.js should return the correct quotient when dividing a negative number by a positive number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = divide(-20, 5);\nexpect(result).to.equal(-4);",
              "err": {},
              "uuid": "480de5cd-c419-40de-9b60-765f281980ac",
              "parentUUID": "eacdeed7-8d92-4156-9b52-f8fa5124bf20",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the correct quotient when dividing two decimal numbers",
              "fullTitle": "divide.js should return the correct quotient when dividing two decimal numbers",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = divide(7.5, 2.5);\nexpect(result).to.equal(3);",
              "err": {},
              "uuid": "3312c5af-75b3-47c8-9fff-9b9948fa85da",
              "parentUUID": "eacdeed7-8d92-4156-9b52-f8fa5124bf20",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "5d8cc567-ff58-448d-94dd-1267d5a7182f",
            "dc401296-4cbc-4ab1-abe5-8a5c3623de23",
            "480de5cd-c419-40de-9b60-765f281980ac",
            "3312c5af-75b3-47c8-9fff-9b9948fa85da"
          ],
          "failures": [
            "b98bd129-1148-4b6d-a71e-72ecded80f36"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "197543ee-51c1-4deb-97f5-35cd62412d6b",
          "title": "isDate.js",
          "fullFile": "/Users/zhiqing.feng/Desktop/Personal/TUN/software_testing_final/software_testing/test/isDate.test.js",
          "file": "/test/isDate.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return true for a valid Date object (new Date())",
              "fullTitle": "isDate.js should return true for a valid Date object (new Date())",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = isDate(new Date());\nexpect(result).to.equal(true);",
              "err": {},
              "uuid": "88cb896a-c385-4eda-a6fe-b8019429033d",
              "parentUUID": "197543ee-51c1-4deb-97f5-35cd62412d6b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false for a string input",
              "fullTitle": "isDate.js should return false for a string input",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = isDate(\"Fri October 11 2024\");\nexpect(result).to.equal(false);",
              "err": {},
              "uuid": "445117ec-a0a2-45fd-b4d6-cd77639b72d7",
              "parentUUID": "197543ee-51c1-4deb-97f5-35cd62412d6b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false for a number input",
              "fullTitle": "isDate.js should return false for a number input",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = isDate(1234);\nexpect(result).to.equal(false);",
              "err": {},
              "uuid": "2d649b3d-0376-446a-bdfb-3fe04cd09cfe",
              "parentUUID": "197543ee-51c1-4deb-97f5-35cd62412d6b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false for a null input",
              "fullTitle": "isDate.js should return false for a null input",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = isDate(null);\nexpect(result).to.equal(false);",
              "err": {},
              "uuid": "28965636-5124-435a-8759-606311f3462f",
              "parentUUID": "197543ee-51c1-4deb-97f5-35cd62412d6b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return true for a valid Date object (new Date(2024, 11, 10))",
              "fullTitle": "isDate.js should return true for a valid Date object (new Date(2024, 11, 10))",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = isDate(new Date(2024, 11, 10));\nexpect(result).to.equal(true);",
              "err": {},
              "uuid": "7dc41818-a2f8-4064-a59d-be04535f3687",
              "parentUUID": "197543ee-51c1-4deb-97f5-35cd62412d6b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "88cb896a-c385-4eda-a6fe-b8019429033d",
            "445117ec-a0a2-45fd-b4d6-cd77639b72d7",
            "2d649b3d-0376-446a-bdfb-3fe04cd09cfe",
            "28965636-5124-435a-8759-606311f3462f",
            "7dc41818-a2f8-4064-a59d-be04535f3687"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "dd9d77a4-d83e-4382-a977-be1f6b1d91e0",
          "title": "Simple test",
          "fullFile": "/Users/zhiqing.feng/Desktop/Personal/TUN/software_testing_final/software_testing/test/simple.test.js",
          "file": "/test/simple.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should pass",
              "fullTitle": "Simple test should pass",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(true).to.be.true;",
              "err": {},
              "uuid": "6ba0a5c7-b783-46bd-973d-06c6ba230052",
              "parentUUID": "dd9d77a4-d83e-4382-a977-be1f6b1d91e0",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "6ba0a5c7-b783-46bd-973d-06c6ba230052"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "a2104049-70fb-4649-9603-5e44a8206f4d",
          "title": "toNumber.js",
          "fullFile": "/Users/zhiqing.feng/Desktop/Personal/TUN/software_testing_final/software_testing/test/toNumber.test.js",
          "file": "/test/toNumber.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return NaN for non-numeric string input",
              "fullTitle": "toNumber.js should return NaN for non-numeric string input",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const result = toNumber('1.8');\nexpect(result).to.be.NaN;",
              "err": {
                "message": "AssertionError: expected 1.8 to be NaN",
                "estack": "AssertionError: expected 1.8 to be NaN\n    at Context.<anonymous> (file:///Users/zhiqing.feng/Desktop/Personal/TUN/software_testing_final/software_testing/test/toNumber.test.js:8:29)\n    at process.processImmediate (node:internal/timers:491:21)",
                "diff": null
              },
              "uuid": "c9f042e7-326f-41e5-91ae-80c919785f11",
              "parentUUID": "a2104049-70fb-4649-9603-5e44a8206f4d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the valid number input",
              "fullTitle": "toNumber.js should return the valid number input",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = toNumber(1.8);\nexpect(result).to.equal(1.8);",
              "err": {},
              "uuid": "dd7d4572-7cb0-436f-baa5-6f1af3931281",
              "parentUUID": "a2104049-70fb-4649-9603-5e44a8206f4d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return NaN for invalid number (comma separator)",
              "fullTitle": "toNumber.js should return NaN for invalid number (comma separator)",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = toNumber('1,8');\nexpect(result).to.be.NaN;",
              "err": {},
              "uuid": "48f3ad04-ad1c-4b67-91f4-d5eef82bcb3c",
              "parentUUID": "a2104049-70fb-4649-9603-5e44a8206f4d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 0 for empty input",
              "fullTitle": "toNumber.js should return 0 for empty input",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = toNumber('');\nexpect(result).to.equal(0);",
              "err": {},
              "uuid": "39508903-f264-4688-9e2c-95c802af7d0e",
              "parentUUID": "a2104049-70fb-4649-9603-5e44a8206f4d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return NaN for a non-numeric string input",
              "fullTitle": "toNumber.js should return NaN for a non-numeric string input",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = toNumber('abc');\nexpect(result).to.be.NaN;",
              "err": {},
              "uuid": "031600ea-abb0-47b9-9b8e-53db84f26e5e",
              "parentUUID": "a2104049-70fb-4649-9603-5e44a8206f4d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return a number for valid binary string input",
              "fullTitle": "toNumber.js should return a number for valid binary string input",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = toNumber('0b101');\nexpect(result).to.equal(5);  // binary '101' is 5 in decimal",
              "err": {},
              "uuid": "c6a5caa5-a20e-4da8-bb46-8ac47ecdba6f",
              "parentUUID": "a2104049-70fb-4649-9603-5e44a8206f4d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return a number for valid octal string input",
              "fullTitle": "toNumber.js should return a number for valid octal string input",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = toNumber('0o17');\nexpect(result).to.equal(15);  // octal '17' is 15 in decimal",
              "err": {},
              "uuid": "7b4c4020-2e97-42c1-859c-29ef07b46ec1",
              "parentUUID": "a2104049-70fb-4649-9603-5e44a8206f4d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return NaN for invalid hexadecimal string",
              "fullTitle": "toNumber.js should return NaN for invalid hexadecimal string",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = toNumber('0xG1');\nexpect(result).to.be.NaN;  // 'G' is not a valid hexadecimal digit",
              "err": {},
              "uuid": "245532bf-8b50-452d-8de6-b9a49e8719dd",
              "parentUUID": "a2104049-70fb-4649-9603-5e44a8206f4d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "dd7d4572-7cb0-436f-baa5-6f1af3931281",
            "48f3ad04-ad1c-4b67-91f4-d5eef82bcb3c",
            "39508903-f264-4688-9e2c-95c802af7d0e",
            "031600ea-abb0-47b9-9b8e-53db84f26e5e",
            "c6a5caa5-a20e-4da8-bb46-8ac47ecdba6f",
            "7b4c4020-2e97-42c1-859c-29ef07b46ec1",
            "245532bf-8b50-452d-8de6-b9a49e8719dd"
          ],
          "failures": [
            "c9f042e7-326f-41e5-91ae-80c919785f11"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}