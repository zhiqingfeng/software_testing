{
  "stats": {
    "suites": 6,
    "tests": 55,
    "passes": 39,
    "pending": 0,
    "failures": 16,
    "start": "2024-12-05T09:50:52.447Z",
    "end": "2024-12-05T09:50:52.476Z",
    "duration": 29,
    "testsRegistered": 55,
    "passPercent": 70.9090909090909,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "87f25440-f586-4cc6-863a-36e53a9c2d72",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "30a28d29-53b5-4feb-af38-37df6e60bf53",
          "title": "add.js",
          "fullFile": "/Users/zhiqing.feng/Desktop/Personal/TUN/software_testing_final/software_testing/test/add.test.js",
          "file": "/test/add.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return 10 for add(6, 4)",
              "fullTitle": "add.js should return 10 for add(6, 4)",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(add(6, 4)).to.equal(10);",
              "err": {},
              "uuid": "5d8f78c7-cff5-47ab-a7e0-1abaff1176c7",
              "parentUUID": "30a28d29-53b5-4feb-af38-37df6e60bf53",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 0 for add(0, 0)",
              "fullTitle": "add.js should return 0 for add(0, 0)",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(add(0, 0)).to.equal(0);",
              "err": {},
              "uuid": "8e08cbba-4105-4f8f-a2ce-57c15990bda2",
              "parentUUID": "30a28d29-53b5-4feb-af38-37df6e60bf53",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle negative numbers",
              "fullTitle": "add.js should handle negative numbers",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(add(-5, -3)).to.equal(-8);",
              "err": {},
              "uuid": "495c029f-64a0-4171-a13b-0283240f219b",
              "parentUUID": "30a28d29-53b5-4feb-af38-37df6e60bf53",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return correct value when adding positive and negative numbers",
              "fullTitle": "add.js should return correct value when adding positive and negative numbers",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(add(10, -5)).to.equal(5);",
              "err": {},
              "uuid": "7d92f867-7cd3-4268-9637-a688add6aaaf",
              "parentUUID": "30a28d29-53b5-4feb-af38-37df6e60bf53",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle decimals",
              "fullTitle": "add.js should handle decimals",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(add(1.5, 2.5)).to.equal(4.0);",
              "err": {},
              "uuid": "9091f95f-7387-4d3d-a719-c714583f3338",
              "parentUUID": "30a28d29-53b5-4feb-af38-37df6e60bf53",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle large numbers",
              "fullTitle": "add.js should handle large numbers",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(add(1000000000, 2000000000)).to.equal(3000000000);",
              "err": {},
              "uuid": "0915e793-761d-4a5e-95dc-879fb8468bfb",
              "parentUUID": "30a28d29-53b5-4feb-af38-37df6e60bf53",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the other number when one argument is 0",
              "fullTitle": "add.js should return the other number when one argument is 0",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(add(0, 5)).to.equal(5);\nexpect(add(10, 0)).to.equal(10);",
              "err": {},
              "uuid": "0ac1cdd0-ffaf-45e3-85ba-235bf0ab1cbc",
              "parentUUID": "30a28d29-53b5-4feb-af38-37df6e60bf53",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return concatenated strings if one or both arguments are strings",
              "fullTitle": "add.js should return concatenated strings if one or both arguments are strings",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(add(\"6\", 4)).to.equal(\"64\");\nexpect(add(6, \"4\")).to.equal(\"64\");\nexpect(add(\"6\", \"4\")).to.equal(\"64\");",
              "err": {},
              "uuid": "6955e7e0-a326-458a-a33a-8fc0c7d0df40",
              "parentUUID": "30a28d29-53b5-4feb-af38-37df6e60bf53",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the argument value if only one argument is provided",
              "fullTitle": "add.js should return the argument value if only one argument is provided",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(add(5)).to.equal(5);\nexpect(add(undefined, 4)).to.equal(4);",
              "err": {},
              "uuid": "6718463e-8c53-4a3c-9759-9f8fb77c742e",
              "parentUUID": "30a28d29-53b5-4feb-af38-37df6e60bf53",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 0 if no arguments are provided",
              "fullTitle": "add.js should return 0 if no arguments are provided",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(add()).to.equal(0);",
              "err": {},
              "uuid": "d9b60ae4-e7bb-44f2-bfd0-e916430dab71",
              "parentUUID": "30a28d29-53b5-4feb-af38-37df6e60bf53",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "5d8f78c7-cff5-47ab-a7e0-1abaff1176c7",
            "8e08cbba-4105-4f8f-a2ce-57c15990bda2",
            "495c029f-64a0-4171-a13b-0283240f219b",
            "7d92f867-7cd3-4268-9637-a688add6aaaf",
            "9091f95f-7387-4d3d-a719-c714583f3338",
            "0915e793-761d-4a5e-95dc-879fb8468bfb",
            "0ac1cdd0-ffaf-45e3-85ba-235bf0ab1cbc",
            "6955e7e0-a326-458a-a33a-8fc0c7d0df40",
            "6718463e-8c53-4a3c-9759-9f8fb77c742e",
            "d9b60ae4-e7bb-44f2-bfd0-e916430dab71"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 5,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "18e5d5fd-d6dd-440c-8503-ac52b45bd23d",
          "title": "compact.js - Remove false values from arrays",
          "fullFile": "/Users/zhiqing.feng/Desktop/Personal/TUN/software_testing_final/software_testing/test/compact.test.js",
          "file": "/test/compact.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should remove null and undefined values",
              "fullTitle": "compact.js - Remove false values from arrays should remove null and undefined values",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const input = [null, 'Snacks', undefined];\nconst result = compact(input);\nexpect(result).to.deep.equal(['Snacks']);  // Corrected to match compact.js behavior",
              "err": {
                "message": "AssertionError: expected [ , '-1': 'Snacks' ] to deeply equal [ 'Snacks' ]",
                "estack": "AssertionError: expected [ , '-1': 'Snacks' ] to deeply equal [ 'Snacks' ]\n    at Context.<anonymous> (file:///Users/zhiqing.feng/Desktop/Personal/TUN/software_testing_final/software_testing/test/compact.test.js:9:32)\n    at process.processImmediate (node:internal/timers:491:21)",
                "diff": "- []\n+ [\n+   \"Snacks\"\n+ ]\n"
              },
              "uuid": "61205552-635e-4a03-b92c-b3b1eec767f2",
              "parentUUID": "18e5d5fd-d6dd-440c-8503-ac52b45bd23d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the array unchanged if there are no false values",
              "fullTitle": "compact.js - Remove false values from arrays should return the array unchanged if there are no false values",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const input = ['Drinks', 'Vegan'];\nconst result = compact(input);\nexpect(result).to.deep.equal(['Drinks', 'Vegan']);  // Ensured input order is unchanged",
              "err": {
                "message": "AssertionError: expected [ 'Vegan', '-1': 'Drinks' ] to deeply equal [ 'Drinks', 'Vegan' ]",
                "estack": "AssertionError: expected [ 'Vegan', '-1': 'Drinks' ] to deeply equal [ 'Drinks', 'Vegan' ]\n    at Context.<anonymous> (file:///Users/zhiqing.feng/Desktop/Personal/TUN/software_testing_final/software_testing/test/compact.test.js:15:32)\n    at process.processImmediate (node:internal/timers:491:21)",
                "diff": " [\n+   \"Drinks\"\n   \"Vegan\"\n ]\n"
              },
              "uuid": "0f753a3b-80b2-4230-8831-dba8cf7a68dd",
              "parentUUID": "18e5d5fd-d6dd-440c-8503-ac52b45bd23d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should remove empty strings from the array",
              "fullTitle": "compact.js - Remove false values from arrays should remove empty strings from the array",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const input = [' ', 'Non-GMO', 'Snacks'];\nconst result = compact(input);\nexpect(result).to.deep.equal(['Non-GMO', 'Snacks']);  // Empty string removed correctly",
              "err": {},
              "uuid": "b0bf7397-dbfd-42ae-9b7b-f86ee006efe0",
              "parentUUID": "18e5d5fd-d6dd-440c-8503-ac52b45bd23d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not remove 'false' and 0 from the array",
              "fullTitle": "compact.js - Remove false values from arrays should not remove 'false' and 0 from the array",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const input = ['false', 'zero', 'Organic'];\nconst result = compact(input);\nexpect(result).to.deep.equal(['false', 'zero', 'Organic']);  // 'false' and 'zero' are strings, not falsy values",
              "err": {
                "message": "AssertionError: expected [ 'zero', 'Organic', '-1': 'fa…' ] to deeply equal [ 'false', 'zero', 'Organic' ]",
                "estack": "AssertionError: expected [ 'zero', 'Organic', '-1': 'fa…' ] to deeply equal [ 'false', 'zero', 'Organic' ]\n    at Context.<anonymous> (file:///Users/zhiqing.feng/Desktop/Personal/TUN/software_testing_final/software_testing/test/compact.test.js:27:32)\n    at process.processImmediate (node:internal/timers:491:21)",
                "diff": " [\n+   \"false\"\n   \"zero\"\n   \"Organic\"\n ]\n"
              },
              "uuid": "96ee43e9-8d89-453b-b46f-3177e4b33385",
              "parentUUID": "18e5d5fd-d6dd-440c-8503-ac52b45bd23d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return an empty array when input is empty",
              "fullTitle": "compact.js - Remove false values from arrays should return an empty array when input is empty",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const input = [];\nconst result = compact(input);\nexpect(result).to.deep.equal([]);  // Empty input should return an empty array",
              "err": {},
              "uuid": "446ff7f6-a4b9-4e7a-8e30-784f3d6eb873",
              "parentUUID": "18e5d5fd-d6dd-440c-8503-ac52b45bd23d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b0bf7397-dbfd-42ae-9b7b-f86ee006efe0",
            "446ff7f6-a4b9-4e7a-8e30-784f3d6eb873"
          ],
          "failures": [
            "61205552-635e-4a03-b92c-b3b1eec767f2",
            "0f753a3b-80b2-4230-8831-dba8cf7a68dd",
            "96ee43e9-8d89-453b-b46f-3177e4b33385"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "56cba762-0583-463d-84f5-9f595b65275a",
          "title": "countBy.js",
          "fullFile": "/Users/zhiqing.feng/Desktop/Personal/TUN/software_testing_final/software_testing/test/countBy.test.js",
          "file": "/test/countBy.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should count the occurrences of specific attribute values",
              "fullTitle": "countBy.js should count the occurrences of specific attribute values",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const users = [\n    { user: \"barney\", active: true },\n    { user: \"betty\", active: true },\n    { user: \"fred\", active: false },\n];\nconst result = countBy(users, (value) => value.active.toString());  // Ensure boolean is treated as string\nexpect(result).to.deep.equal({ \"true\": 2, \"false\": 1 });",
              "err": {
                "message": "AssertionError: expected { true: 1, false: +0 } to deeply equal { true: 2, false: 1 }",
                "estack": "AssertionError: expected { true: 1, false: +0 } to deeply equal { true: 2, false: 1 }\n    at Context.<anonymous> (file:///Users/zhiqing.feng/Desktop/Personal/TUN/software_testing_final/software_testing/test/countBy.test.js:14:32)\n    at process.processImmediate (node:internal/timers:491:21)",
                "diff": " {\n-   \"false\": 0\n-   \"true\": 1\n+   \"false\": 1\n+   \"true\": 2\n }\n"
              },
              "uuid": "8f8b5923-309d-4ec4-9fa2-42d7237805c7",
              "parentUUID": "56cba762-0583-463d-84f5-9f595b65275a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the number if number is valid",
              "fullTitle": "countBy.js should return the number if number is valid",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const numbers = [1.8, 2.2, 3.3, 2.4];\nconst result = countBy(numbers, (value) => Math.floor(value));\nexpect(result).to.deep.equal({ '1': 1, '2': 2, '3': 1 });",
              "err": {
                "message": "AssertionError: expected { '1': +0, '2': 1, '3': +0 } to deeply equal { '1': 1, '2': 2, '3': 1 }",
                "estack": "AssertionError: expected { '1': +0, '2': 1, '3': +0 } to deeply equal { '1': 1, '2': 2, '3': 1 }\n    at Context.<anonymous> (file:///Users/zhiqing.feng/Desktop/Personal/TUN/software_testing_final/software_testing/test/countBy.test.js:21:32)\n    at process.processImmediate (node:internal/timers:491:21)",
                "diff": " {\n-   \"1\": 0\n-   \"2\": 1\n-   \"3\": 0\n+   \"1\": 1\n+   \"2\": 2\n+   \"3\": 1\n }\n"
              },
              "uuid": "a911381d-689d-4cba-9c76-1015eb7aa22a",
              "parentUUID": "56cba762-0583-463d-84f5-9f595b65275a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should convert valid numeric strings into their correct numeric value",
              "fullTitle": "countBy.js should convert valid numeric strings into their correct numeric value",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const values = [\"1.8\", \"2.2\", \"3.3\", \"2.4\"];\nconst result = countBy(values, (value) => Math.floor(Number(value))); // Convert string to number first\nexpect(result).to.deep.equal({ '1': 1, '2': 2, '3': 1 });",
              "err": {
                "message": "AssertionError: expected { '1': +0, '2': 1, '3': +0 } to deeply equal { '1': 1, '2': 2, '3': 1 }",
                "estack": "AssertionError: expected { '1': +0, '2': 1, '3': +0 } to deeply equal { '1': 1, '2': 2, '3': 1 }\n    at Context.<anonymous> (file:///Users/zhiqing.feng/Desktop/Personal/TUN/software_testing_final/software_testing/test/countBy.test.js:28:32)\n    at process.processImmediate (node:internal/timers:491:21)",
                "diff": " {\n-   \"1\": 0\n-   \"2\": 1\n-   \"3\": 0\n+   \"1\": 1\n+   \"2\": 2\n+   \"3\": 1\n }\n"
              },
              "uuid": "560262f6-ee87-4dcd-a3a5-2b1847ac7f36",
              "parentUUID": "56cba762-0583-463d-84f5-9f595b65275a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle arrays with duplicate values",
              "fullTitle": "countBy.js should handle arrays with duplicate values",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const numbers = [1, 2, 2, 3, 3, 3];\nconst result = countBy(numbers, (value) => value.toString());  // Ensure numbers are treated as strings\nexpect(result).to.deep.equal({ '1': 1, '2': 2, '3': 3 });",
              "err": {
                "message": "AssertionError: expected { '1': +0, '2': 1, '3': 2 } to deeply equal { '1': 1, '2': 2, '3': 3 }",
                "estack": "AssertionError: expected { '1': +0, '2': 1, '3': 2 } to deeply equal { '1': 1, '2': 2, '3': 3 }\n    at Context.<anonymous> (file:///Users/zhiqing.feng/Desktop/Personal/TUN/software_testing_final/software_testing/test/countBy.test.js:35:32)\n    at process.processImmediate (node:internal/timers:491:21)",
                "diff": " {\n-   \"1\": 0\n-   \"2\": 1\n-   \"3\": 2\n+   \"1\": 1\n+   \"2\": 2\n+   \"3\": 3\n }\n"
              },
              "uuid": "773d31f0-4809-4da5-8f5b-02a53f15366e",
              "parentUUID": "56cba762-0583-463d-84f5-9f595b65275a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error for invalid collection input",
              "fullTitle": "countBy.js should throw an error for invalid collection input",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(() => countBy(null, (value) => value)).to.throw();\nexpect(() => countBy(undefined, (value) => value)).to.throw();\nexpect(() => countBy(\"not a collection\", (value) => value)).to.throw();",
              "err": {
                "message": "AssertionError: expected [Function] to throw an error",
                "estack": "AssertionError: expected [Function] to throw an error\n    at Context.<anonymous> (file:///Users/zhiqing.feng/Desktop/Personal/TUN/software_testing_final/software_testing/test/countBy.test.js:40:63)\n    at process.processImmediate (node:internal/timers:491:21)",
                "diff": null
              },
              "uuid": "011f2460-e900-4277-b3d8-9c7c50169e56",
              "parentUUID": "56cba762-0583-463d-84f5-9f595b65275a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return an empty object for an empty array",
              "fullTitle": "countBy.js should return an empty object for an empty array",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = countBy([], (value) => value);\nexpect(result).to.deep.equal({});",
              "err": {},
              "uuid": "07b89d52-ea50-4764-8d03-7b251a31f345",
              "parentUUID": "56cba762-0583-463d-84f5-9f595b65275a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error for invalid iteratee",
              "fullTitle": "countBy.js should throw an error for invalid iteratee",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const input = [1, 2, 3];\nexpect(() => countBy(input, null)).to.throw();\nexpect(() => countBy(input, undefined)).to.throw();",
              "err": {},
              "uuid": "3bf83cf3-4658-456f-9e04-3e18a28405e7",
              "parentUUID": "56cba762-0583-463d-84f5-9f595b65275a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "07b89d52-ea50-4764-8d03-7b251a31f345",
            "3bf83cf3-4658-456f-9e04-3e18a28405e7"
          ],
          "failures": [
            "8f8b5923-309d-4ec4-9fa2-42d7237805c7",
            "a911381d-689d-4cba-9c76-1015eb7aa22a",
            "560262f6-ee87-4dcd-a3a5-2b1847ac7f36",
            "773d31f0-4809-4da5-8f5b-02a53f15366e",
            "011f2460-e900-4277-b3d8-9c7c50169e56"
          ],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "b4ac11c2-0b66-4307-9a65-e21c1b802fe0",
          "title": "divide.js",
          "fullFile": "/Users/zhiqing.feng/Desktop/Personal/TUN/software_testing_final/software_testing/test/divide.test.js",
          "file": "/test/divide.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return 1.5 for divide(6, 4)",
              "fullTitle": "divide.js should return 1.5 for divide(6, 4)",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(divide(6, 4)).to.equal(1.5);",
              "err": {
                "message": "AssertionError: expected 1 to equal 1.5",
                "estack": "AssertionError: expected 1 to equal 1.5\n    at Context.<anonymous> (file:///Users/zhiqing.feng/Desktop/Personal/TUN/software_testing_final/software_testing/test/divide.test.js:6:33)\n    at process.processImmediate (node:internal/timers:491:21)",
                "diff": "- 1\n+ 1.5\n"
              },
              "uuid": "927a3470-28a8-4917-98ab-924af1e79659",
              "parentUUID": "b4ac11c2-0b66-4307-9a65-e21c1b802fe0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 2 for divide(10, 5)",
              "fullTitle": "divide.js should return 2 for divide(10, 5)",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(divide(10, 5)).to.equal(2);",
              "err": {
                "message": "AssertionError: expected 1 to equal 2",
                "estack": "AssertionError: expected 1 to equal 2\n    at Context.<anonymous> (file:///Users/zhiqing.feng/Desktop/Personal/TUN/software_testing_final/software_testing/test/divide.test.js:10:34)\n    at process.processImmediate (node:internal/timers:491:21)",
                "diff": "- 1\n+ 2\n"
              },
              "uuid": "e419cef9-59dd-4c52-81ef-e2b364448499",
              "parentUUID": "b4ac11c2-0b66-4307-9a65-e21c1b802fe0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return NaN for divide(10, 0)",
              "fullTitle": "divide.js should return NaN for divide(10, 0)",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(divide(10, 0)).to.be.NaN;",
              "err": {},
              "uuid": "304d41ba-bee3-4b05-8d4c-16770d681014",
              "parentUUID": "b4ac11c2-0b66-4307-9a65-e21c1b802fe0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle negative numbers",
              "fullTitle": "divide.js should handle negative numbers",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(divide(-10, 5)).to.equal(-2);\nexpect(divide(10, -5)).to.equal(-2);",
              "err": {
                "message": "AssertionError: expected 1 to equal -2",
                "estack": "AssertionError: expected 1 to equal -2\n    at Context.<anonymous> (file:///Users/zhiqing.feng/Desktop/Personal/TUN/software_testing_final/software_testing/test/divide.test.js:18:35)\n    at process.processImmediate (node:internal/timers:491:21)",
                "diff": "- 1\n+ -2\n"
              },
              "uuid": "1cec7024-86c2-496e-bb5e-5698263aab11",
              "parentUUID": "b4ac11c2-0b66-4307-9a65-e21c1b802fe0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle decimals",
              "fullTitle": "divide.js should handle decimals",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(divide(7.5, 2.5)).to.equal(3);",
              "err": {
                "message": "AssertionError: expected 1 to equal 3",
                "estack": "AssertionError: expected 1 to equal 3\n    at Context.<anonymous> (file:///Users/zhiqing.feng/Desktop/Personal/TUN/software_testing_final/software_testing/test/divide.test.js:23:37)\n    at process.processImmediate (node:internal/timers:491:21)",
                "diff": "- 1\n+ 3\n"
              },
              "uuid": "880e2246-94ae-4bd4-95ac-cf2bd9e936f0",
              "parentUUID": "b4ac11c2-0b66-4307-9a65-e21c1b802fe0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 0 when dividend is 0",
              "fullTitle": "divide.js should return 0 when dividend is 0",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(divide(0, 5)).to.equal(0);",
              "err": {
                "message": "AssertionError: expected 1 to equal +0",
                "estack": "AssertionError: expected 1 to equal +0\n    at Context.<anonymous> (file:///Users/zhiqing.feng/Desktop/Personal/TUN/software_testing_final/software_testing/test/divide.test.js:27:33)\n    at process.processImmediate (node:internal/timers:491:21)",
                "diff": "- 1\n+ 0\n"
              },
              "uuid": "216b88da-dccf-4f4d-b809-c42733d4d3be",
              "parentUUID": "b4ac11c2-0b66-4307-9a65-e21c1b802fe0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle large numbers",
              "fullTitle": "divide.js should handle large numbers",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(divide(1000000000, 2000000000)).to.equal(0.5);",
              "err": {
                "message": "AssertionError: expected 1 to equal 0.5",
                "estack": "AssertionError: expected 1 to equal 0.5\n    at Context.<anonymous> (file:///Users/zhiqing.feng/Desktop/Personal/TUN/software_testing_final/software_testing/test/divide.test.js:31:51)\n    at process.processImmediate (node:internal/timers:491:21)",
                "diff": "- 1\n+ 0.5\n"
              },
              "uuid": "44c1bea3-7400-411a-970a-83b6137a17a7",
              "parentUUID": "b4ac11c2-0b66-4307-9a65-e21c1b802fe0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error or return NaN for invalid inputs",
              "fullTitle": "divide.js should throw an error or return NaN for invalid inputs",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(() => divide(\"6\", 4)).to.throw(); // If input validation exists\nexpect(divide(\"6\", 4)).to.be.NaN;       // If input validation doesn’t exist\nexpect(divide(6, \"4\")).to.be.NaN;\nexpect(divide(\"6\", \"4\")).to.be.NaN;",
              "err": {
                "message": "AssertionError: expected [Function] to throw an error",
                "estack": "AssertionError: expected [Function] to throw an error\n    at Context.<anonymous> (file:///Users/zhiqing.feng/Desktop/Personal/TUN/software_testing_final/software_testing/test/divide.test.js:35:46)\n    at process.processImmediate (node:internal/timers:491:21)",
                "diff": null
              },
              "uuid": "7eecf8b9-f949-45d0-9796-8a73a8f444a1",
              "parentUUID": "b4ac11c2-0b66-4307-9a65-e21c1b802fe0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 1 for divide(1, 1)",
              "fullTitle": "divide.js should return 1 for divide(1, 1)",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(divide(1, 1)).to.equal(1);",
              "err": {},
              "uuid": "ba2e790c-8079-4d31-b920-afadb3a64f08",
              "parentUUID": "b4ac11c2-0b66-4307-9a65-e21c1b802fe0",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "304d41ba-bee3-4b05-8d4c-16770d681014",
            "ba2e790c-8079-4d31-b920-afadb3a64f08"
          ],
          "failures": [
            "927a3470-28a8-4917-98ab-924af1e79659",
            "e419cef9-59dd-4c52-81ef-e2b364448499",
            "1cec7024-86c2-496e-bb5e-5698263aab11",
            "880e2246-94ae-4bd4-95ac-cf2bd9e936f0",
            "216b88da-dccf-4f4d-b809-c42733d4d3be",
            "44c1bea3-7400-411a-970a-83b6137a17a7",
            "7eecf8b9-f949-45d0-9796-8a73a8f444a1"
          ],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "c3ff35c5-922f-431d-8a6b-47d759c286fc",
          "title": "isDate.js",
          "fullFile": "/Users/zhiqing.feng/Desktop/Personal/TUN/software_testing_final/software_testing/test/isDate.test.js",
          "file": "/test/isDate.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return true for a valid Date object",
              "fullTitle": "isDate.js should return true for a valid Date object",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = isDate(new Date());\nexpect(result).to.be.true;",
              "err": {},
              "uuid": "8cabf886-b626-4e90-9eb8-4d20be2adeb7",
              "parentUUID": "c3ff35c5-922f-431d-8a6b-47d759c286fc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false for a string that looks like a date",
              "fullTitle": "isDate.js should return false for a string that looks like a date",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = isDate(\"Mon April 23 2012\");\nexpect(result).to.be.false;",
              "err": {},
              "uuid": "534e4e25-95f3-4f0a-be75-9c8d6208abd0",
              "parentUUID": "c3ff35c5-922f-431d-8a6b-47d759c286fc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false for a timestamp number",
              "fullTitle": "isDate.js should return false for a timestamp number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = isDate(1659394800000); // Example timestamp\nexpect(result).to.be.false;",
              "err": {},
              "uuid": "1bc26606-dca7-47cc-8b26-2a910a15c174",
              "parentUUID": "c3ff35c5-922f-431d-8a6b-47d759c286fc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false for null or undefined",
              "fullTitle": "isDate.js should return false for null or undefined",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(isDate(null)).to.be.false;\nexpect(isDate(undefined)).to.be.false;",
              "err": {},
              "uuid": "c70b7fa8-df83-43b4-a6e6-9966974d9207",
              "parentUUID": "c3ff35c5-922f-431d-8a6b-47d759c286fc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false for plain objects",
              "fullTitle": "isDate.js should return false for plain objects",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = isDate({ year: 2023, month: 12, day: 1 });\nexpect(result).to.be.false;",
              "err": {},
              "uuid": "8d2b10f5-0d4e-472e-97e6-a6ac973428de",
              "parentUUID": "c3ff35c5-922f-431d-8a6b-47d759c286fc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false for arrays",
              "fullTitle": "isDate.js should return false for arrays",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = isDate([\"2023-12-01\"]);\nexpect(result).to.be.false;",
              "err": {},
              "uuid": "c1251533-7e7f-4674-ba4f-c7c63e610b81",
              "parentUUID": "c3ff35c5-922f-431d-8a6b-47d759c286fc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return true for an invalid Date object",
              "fullTitle": "isDate.js should return true for an invalid Date object",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = isDate(new Date(\"invalid date\"));\nexpect(result).to.be.true; // It's still a Date object, even if it's invalid.",
              "err": {},
              "uuid": "3484be38-7628-460d-af70-b3100f91a11a",
              "parentUUID": "c3ff35c5-922f-431d-8a6b-47d759c286fc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle custom Date-like objects",
              "fullTitle": "isDate.js should handle custom Date-like objects",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const customDate = { toString: () => \"[object Date]\" };\nconst result = isDate(customDate);\nexpect(result).to.be.false;",
              "err": {},
              "uuid": "8685718a-d949-4ec0-ac40-84d37372eaf2",
              "parentUUID": "c3ff35c5-922f-431d-8a6b-47d759c286fc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle edge cases with other object types",
              "fullTitle": "isDate.js should handle edge cases with other object types",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(isDate(new Map())).to.be.false;\nexpect(isDate(new Set())).to.be.false;",
              "err": {},
              "uuid": "c6f37d09-0fc0-41e6-b2e6-73b86b16dada",
              "parentUUID": "c3ff35c5-922f-431d-8a6b-47d759c286fc",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "8cabf886-b626-4e90-9eb8-4d20be2adeb7",
            "534e4e25-95f3-4f0a-be75-9c8d6208abd0",
            "1bc26606-dca7-47cc-8b26-2a910a15c174",
            "c70b7fa8-df83-43b4-a6e6-9966974d9207",
            "8d2b10f5-0d4e-472e-97e6-a6ac973428de",
            "c1251533-7e7f-4674-ba4f-c7c63e610b81",
            "3484be38-7628-460d-af70-b3100f91a11a",
            "8685718a-d949-4ec0-ac40-84d37372eaf2",
            "c6f37d09-0fc0-41e6-b2e6-73b86b16dada"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "1e0e2af9-bd0f-4eb8-aece-14da920dbfbb",
          "title": "toNumber.js",
          "fullFile": "/Users/zhiqing.feng/Desktop/Personal/TUN/software_testing_final/software_testing/test/toNumber.test.js",
          "file": "/test/toNumber.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return the same number for numeric input",
              "fullTitle": "toNumber.js should return the same number for numeric input",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(toNumber(3.2)).to.equal(3.2);\nexpect(toNumber(Number.MIN_VALUE)).to.equal(5e-324);\nexpect(toNumber(Infinity)).to.equal(Infinity);\nexpect(toNumber(0)).to.equal(0);",
              "err": {},
              "uuid": "80f971b8-fa19-440b-9a82-e9e1b470a043",
              "parentUUID": "1e0e2af9-bd0f-4eb8-aece-14da920dbfbb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should parse numeric strings correctly",
              "fullTitle": "toNumber.js should parse numeric strings correctly",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(toNumber(\"3.2\")).to.equal(3.2);\nexpect(toNumber(\"  42  \")).to.equal(42); // Leading/trailing whitespace",
              "err": {},
              "uuid": "f1a31449-a7ee-4d67-916b-72b19b769536",
              "parentUUID": "1e0e2af9-bd0f-4eb8-aece-14da920dbfbb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return NaN for non-numeric strings",
              "fullTitle": "toNumber.js should return NaN for non-numeric strings",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(toNumber(\"abc\")).to.be.NaN;\nexpect(toNumber(\"123abc\")).to.be.NaN;\nexpect(toNumber(\"\")).to.be.NaN;",
              "err": {
                "message": "AssertionError: expected +0 to be NaN",
                "estack": "AssertionError: expected +0 to be NaN\n    at Context.<anonymous> (file:///Users/zhiqing.feng/Desktop/Personal/TUN/software_testing_final/software_testing/test/toNumber.test.js:20:35)\n    at process.processImmediate (node:internal/timers:491:21)",
                "diff": null
              },
              "uuid": "9801b897-f087-451e-bfc9-15736d680eb2",
              "parentUUID": "1e0e2af9-bd0f-4eb8-aece-14da920dbfbb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle binary strings",
              "fullTitle": "toNumber.js should handle binary strings",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(toNumber(\"0b101\")).to.equal(5); // Binary representation",
              "err": {},
              "uuid": "21fed753-f76c-4fba-baa7-38034790222c",
              "parentUUID": "1e0e2af9-bd0f-4eb8-aece-14da920dbfbb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle octal strings",
              "fullTitle": "toNumber.js should handle octal strings",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(toNumber(\"0o10\")).to.equal(8); // Octal representation",
              "err": {},
              "uuid": "ce0c38f2-6bb6-4533-9812-4cc95d296729",
              "parentUUID": "1e0e2af9-bd0f-4eb8-aece-14da920dbfbb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle hexadecimal strings",
              "fullTitle": "toNumber.js should handle hexadecimal strings",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(toNumber(\"0x1f\")).to.equal(31); // Hexadecimal representation",
              "err": {},
              "uuid": "13c0692c-2daf-4899-9478-2588b2fe5e05",
              "parentUUID": "1e0e2af9-bd0f-4eb8-aece-14da920dbfbb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return NaN for invalid hexadecimal strings",
              "fullTitle": "toNumber.js should return NaN for invalid hexadecimal strings",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(toNumber(\"0x1g\")).to.be.NaN; // Invalid hexadecimal",
              "err": {},
              "uuid": "fdb66b61-e61d-4cb6-aa76-477bd99522b4",
              "parentUUID": "1e0e2af9-bd0f-4eb8-aece-14da920dbfbb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return NaN for symbols",
              "fullTitle": "toNumber.js should return NaN for symbols",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(toNumber(Symbol(\"symbol\"))).to.be.NaN;",
              "err": {},
              "uuid": "9173370e-bb6f-4979-b1d2-95d6ecbc9f60",
              "parentUUID": "1e0e2af9-bd0f-4eb8-aece-14da920dbfbb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle objects with valueOf method",
              "fullTitle": "toNumber.js should handle objects with valueOf method",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const obj = {\n    valueOf: () => 42\n};\nexpect(toNumber(obj)).to.equal(42);",
              "err": {},
              "uuid": "f798ad30-691c-41b4-b156-ff4b7af534d6",
              "parentUUID": "1e0e2af9-bd0f-4eb8-aece-14da920dbfbb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle objects without valueOf method",
              "fullTitle": "toNumber.js should handle objects without valueOf method",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const obj = { a: 1 };\nexpect(toNumber(obj)).to.be.NaN;",
              "err": {},
              "uuid": "e9d4243c-5bda-400d-815b-669d15550bb2",
              "parentUUID": "1e0e2af9-bd0f-4eb8-aece-14da920dbfbb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle arrays",
              "fullTitle": "toNumber.js should handle arrays",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(toNumber([42])).to.equal(42); // Single-element array\nexpect(toNumber([1, 2])).to.be.NaN; // Multi-element array",
              "err": {},
              "uuid": "5daddc0e-38c4-43de-b067-0dd21fb0ebd3",
              "parentUUID": "1e0e2af9-bd0f-4eb8-aece-14da920dbfbb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return NaN for null or undefined",
              "fullTitle": "toNumber.js should return NaN for null or undefined",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(toNumber(null)).to.equal(0); // Special case: null is coerced to 0\nexpect(toNumber(undefined)).to.be.NaN;",
              "err": {},
              "uuid": "bef8b766-5352-4771-9ea4-a2e70d3a9f83",
              "parentUUID": "1e0e2af9-bd0f-4eb8-aece-14da920dbfbb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle edge cases with `0`",
              "fullTitle": "toNumber.js should handle edge cases with `0`",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(toNumber(0)).to.equal(0); // 0 should remain 0\nexpect(toNumber(-0)).to.equal(-0); // -0 should remain -0",
              "err": {},
              "uuid": "6085a02b-8ce6-4e24-86c4-0a443e2c1805",
              "parentUUID": "1e0e2af9-bd0f-4eb8-aece-14da920dbfbb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle empty objects gracefully",
              "fullTitle": "toNumber.js should handle empty objects gracefully",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(toNumber({})).to.be.NaN;",
              "err": {},
              "uuid": "be408522-d1ed-49cc-bcb1-0ef734459a08",
              "parentUUID": "1e0e2af9-bd0f-4eb8-aece-14da920dbfbb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle very large numbers in strings",
              "fullTitle": "toNumber.js should handle very large numbers in strings",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(toNumber(\"1e+30\")).to.equal(1e30); // Scientific notation",
              "err": {},
              "uuid": "389ead61-e750-488d-a74b-8d2540f2e60a",
              "parentUUID": "1e0e2af9-bd0f-4eb8-aece-14da920dbfbb",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "80f971b8-fa19-440b-9a82-e9e1b470a043",
            "f1a31449-a7ee-4d67-916b-72b19b769536",
            "21fed753-f76c-4fba-baa7-38034790222c",
            "ce0c38f2-6bb6-4533-9812-4cc95d296729",
            "13c0692c-2daf-4899-9478-2588b2fe5e05",
            "fdb66b61-e61d-4cb6-aa76-477bd99522b4",
            "9173370e-bb6f-4979-b1d2-95d6ecbc9f60",
            "f798ad30-691c-41b4-b156-ff4b7af534d6",
            "e9d4243c-5bda-400d-815b-669d15550bb2",
            "5daddc0e-38c4-43de-b067-0dd21fb0ebd3",
            "bef8b766-5352-4771-9ea4-a2e70d3a9f83",
            "6085a02b-8ce6-4e24-86c4-0a443e2c1805",
            "be408522-d1ed-49cc-bcb1-0ef734459a08",
            "389ead61-e750-488d-a74b-8d2540f2e60a"
          ],
          "failures": [
            "9801b897-f087-451e-bfc9-15736d680eb2"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}